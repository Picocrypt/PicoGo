package encryption

import (
	"crypto/sha256"
	"encoding/hex"
	"hash"
	"io"
	"log"
	"os"
	"testing"
)

/*
The encryption and decryption methods rotate the nonces every 60 GB. To accurately test this,
we need to actually encrypt/decrypt files larger than 60 GB. Instead of adding files that large
to the repository, we can create a test that simulates this behavior. These tests will generate
files of zeros, encrypt it, and then decrypt it. The sha256 of the encrypted and decrypted files
can be compared against expected values generated by hand, following these steps:

1. Create a file of zeros (bash ex: dd if=/dev/zero of=zerofile bs=1M count=62464)
2. Get the sha256 of the file (bash ex: sha256sum zerofile)
3. Encrypt the file using whatever Picocrypt version you want to test against
4. Get the sha256sum of the encrypted file (bash ex: sha256sum zerofile.pcv)
5. Save the header bytes from the encrypted file (bash ex: head -c 789 zerofile.pcv > zerofile.header)
   - if testing with comments or deniability mode, replace 789 with the appropriate number of bytes
6. Create a test with the header bytes and the sha256sums
*/

type zeroReader struct {
	size    int64
	counter int64
}

func (z *zeroReader) Read(p []byte) (n int, err error) {
	if z.counter == z.size {
		return 0, io.EOF
	}
	for i := range p {
		p[i] = 0
		z.counter++
		if z.counter == z.size {
			log.Println("reached size ", z.size)
			return i + 1, nil
		}
	}
	// log.Println("have read ", z.counter)
	return len(p), nil
}

type shaDecryptWriter struct {
	decryptStream *decryptStream
	encryptedSha  hash.Hash
	decryptedSha  hash.Hash
}

func (s *shaDecryptWriter) Write(p []byte) (int, error) {
	_, err := s.encryptedSha.Write(p)
	if err != nil {
		return 0, err
	}
	decoded, err := s.decryptStream.stream(p)
	if err != nil {
		return 0, err
	}
	_, err = s.decryptedSha.Write(decoded)
	if err != nil {
		return 0, err
	}
	return len(p), nil
}

func (s *shaDecryptWriter) shas() ([]byte, []byte, error) {
	decoded, err := s.decryptStream.flush()
	log.Println("flush size: ", len(decoded))
	if err != nil {
		return nil, nil, err
	}
	_, err = s.decryptedSha.Write(decoded)
	if err != nil {
		return nil, nil, err
	}
	return s.encryptedSha.Sum(nil), s.decryptedSha.Sum(nil), nil
}

func compareShas(
	t *testing.T,
	password string,
	headerFilename string,
	encodedSha string,
	decodedSha string,
	zeroFileSize int64,
) {
	headerReader, err := os.Open(headerFilename)
	if err != nil {
		t.Fatal("opening header file:", err)
	}
	defer headerReader.Close()
	headerBytes, err := io.ReadAll(headerReader)
	if err != nil {
		t.Fatal("reading header:", err)
	}

	damageTracker := &damageTracker{}
	writer := &shaDecryptWriter{makeDecryptStream(password, nil, damageTracker), sha256.New(), sha256.New()}
	_, err = writer.Write(headerBytes)
	if err != nil {
		t.Fatal("writing header:", err)
	}
	if !writer.decryptStream.headerStream.isDone() {
		t.Fatal("header stream should be done")
	}

	_, err = encryptWithSeeds(
		writer.decryptStream.headerStream.header.seeds,
		&zeroReader{size: zeroFileSize},
		password,
		[]io.Reader{},
		writer.decryptStream.headerStream.header.settings,
		writer,
	)
	if err != nil {
		t.Fatal("encrypting:", err)
	}

	eSha, dSha, err := writer.shas()
	if err != nil {
		t.Fatal("getting shas:", err)
	}
	if hex.EncodeToString(eSha) != encodedSha {
		t.Fatal("encoded sha256 does not match")
	}
	if hex.EncodeToString(dSha) != decodedSha {
		t.Fatal("decoded sha256 does not match")
	}
}

func TestSmallFile(t *testing.T) {
	// Small test encoded with picogo, 1K file size
	compareShas(
		t,
		"password",
		"examples/smallfile.header",
		"b501219c59855b8ba2e00fe2cc9ec9fd0b189f16a750f4593fd79964d2bed427",
		"5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef",
		(1 << 10), // 1K
	)
}

func TestLargeFile(t *testing.T) {
	// Large test encoded with picogo, 65GB file size
	compareShas(
		t,
		"password",
		"examples/largefile.header",
		"b65d470bfb6c9e07f09811244597f88177ba4cc68ae101002d5c5c8a6cf08500",
		"f3f0d678fa138e4581ed15ec63f8cb965e5d7b722db7d5fc4877e763163d399c",
		65498251264,
	)
}
